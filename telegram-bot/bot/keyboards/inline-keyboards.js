import { CarController } from '../../controllers'

class InlineKeyboard {
   async init() {
      const menuData = {
         allCars: await CarController.getAllCars(),
         models: await CarController.getAllModelNames(),
         engines: await CarController.getAllEngineTypes(),
         equipments: await CarController.getAllEquipmentNames(),
      }
      this.allCars = menuData.allCars.data
      this.modelNames = menuData.models.data
      this.engineTypes = menuData.engines.data
      this.equipmentNames = menuData.equipments.data
      return {
         allCars: this.allCars,
         modelNames: this.modelNames,
         engineTypes: this.engineTypes,
         equipmentNames: this.equipmentNames,
      }
   }

   selectCity() {
      return [
         [{
            text: '<-',
            callback_data: 'prev',
         },{
            text: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
            callback_data: 'select_city_1',
         }],
         [{
            text: '–ú–æ—Å–∫–≤–∞ –∏ –ø–æ–¥–º–æ—Å–∫–æ–≤—å–µ',
            callback_data: 'select_city_2',
         },{
            text: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
            callback_data: 'select_city_3',
         }],
         [{
            text: '–¢—É–ª–∞',
            callback_data: 'select_city_4',
         },{
            text: '–¢—é–º–µ–Ω—å',
            callback_data: 'select_city_5',
         }],
      ]
   }
   selectDiler() {
      return [
         [{
            text: '–ê–∫—Ä–æ—Å',
            callback_data: 'select_diler_1',
         },{
            text: 'Major',
            callback_data: 'select_diler_2',
         }],
         [{
            text: '–¶–µ–Ω—Ç—Ä –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥',
            callback_data: 'select_diler_3',
         },{
            text: '–§–∞–≤–æ—Ä–∏—Ç –ú–æ—Ç–æ—Ä—Å –í–æ—Å—Ç–æ–∫',
            callback_data: 'select_diler_4',
         }],
         [{
            text: '–§–∞–≤–æ—Ä–∏—Ç –ú–æ—Ç–æ—Ä—Å –°–µ–≤–µ—Ä',
            callback_data: 'select_diler_5',
         },{
            text: '–°–ò–ú',
            callback_data: 'select_diler_6',
         }],
      ]
   }
   selectPayment() {
      return [
         [{
            text: '–í –∫—Ä–µ–¥–∏—Ç',
            callback_data: 'credit',
         }],
         [{
            text: '–ù–∞–ª–∏—á–Ω—ã–µ',
            callback_data: 'nal',
         }]
      ]
   }

   bookThis() {
      return {
         first: () => {
            return {
               image: 'https://www.masmotors.ru/colors/hyundai-sonata/10.png',
               caption: `SONATA Classic\n2.0 MPI - 6AT\n\n–¶–≤–µ—Ç: –ë–ï–õ–´–ô\n–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è\n–ü—Ä–∏–≤–æ–¥: –ü–µ—Ä–µ–¥–Ω–∏–π\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 1852000 ‚ÇΩ\n\nhttps://showroom.hyundai.ru/model/e0931bca-75be-45d1-9c81-edf80ada05dd`,
               button: [[{
                  text: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å',
                  callback_data: 'book_this',
               }]]
            }
         },
         second: () => {
            return {
               image: 'https://www.masmotors.ru/colors/hyundai-creta/14.png',
               caption: `–ù–æ–≤–∞—è CRETA Classic\n1.6–ª 6MT 2WD\n\n–¶–≤–µ—Ç: –ß–ï–†–ù–´–ô\n–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è\n–ü—Ä–∏–≤–æ–¥: –ü–µ—Ä–µ–¥–Ω–∏–π\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 1344000 ‚ÇΩ\n\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n\n+–ü–æ–¥–æ–≥—Ä–µ–≤ —Ä—É–ª—è\n\n+–ü–æ–¥–æ–≥—Ä–µ–≤ –ª–æ–±–æ–≤–æ–≥–æ —Å—Ç–µ–∫–ª–∞\n\n+–ü–æ–¥–æ–≥—Ä–µ–≤ —Ñ–æ—Ä—Å—É–Ω–æ–∫ —Å—Ç–µ–∫–ª–æ–æ–º—ã–≤–∞—Ç–µ–ª—è\n\n+–û—Ç–¥–µ–ª–∫–∞ —Ä—É–ª—è –∫–æ–∂–µ–π\n\nhttps://showroom.hyundai.ru/model/ce89f873-69c8-4dbf-a5aa-b533a40c6ea4`,
               button: [[{
                  text: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å',
                  callback_data: 'book_this',
               }]]
            }
         }
      }
   }

   // –ú–û–î–ï–õ–ò
   async getModelsKeyboard(userSubscribes) {
      const carModelsKeyboard = []
      let keyboardRow = []
      if(this.modelNames) {
         for(let model of this.modelNames) {
            const buttonIcon = this.checkModelSubscribe(model.callback_action, userSubscribes)
            keyboardRow.push({
               text: `${buttonIcon} ${model.model_name}`,
               callback_data: model.callback_action
            })
            if(keyboardRow.length === 3) {
               carModelsKeyboard.push(keyboardRow)
               keyboardRow = []
            }
         }
         keyboardRow.length > 0 ? carModelsKeyboard.push(keyboardRow) : ''
         carModelsKeyboard.push([{
            text: '–õ—é–±–∞—è',
            callback_data: 'subscribe_all_models',
         }])
         return carModelsKeyboard
      }
   }
   // –î–í–ò–ì–ê–¢–ï–õ–ò
   getEnginesKeyboard(modelShortcut, userSubscribes) {
      const enginesKeyboard = []
      const engineShortcuts = new Set()
      const engineShortcutsArr = []
      let keyboardRow = []
      if(this.allCars) {
         for(let car of this.allCars) {
            if(car.model_name === modelShortcut) {
               engineShortcuts.add(car.engine_type)
            }
         }
         for(let foundedEngine of engineShortcuts) {
            const engine = this.engineTypes.find((engineType) => {
               if(engineType.callback_action === foundedEngine) {
                  return foundedEngine
               }
            })
            engineShortcutsArr.push(engine.callback_action)
            if(engine) {
               const buttonIcon = this.checkEngineSubscribe(foundedEngine, userSubscribes)
               keyboardRow.push({
                  text: `${buttonIcon} ${engine.engine_type}`,
                  callback_data: engine.callback_action
               })
               if(keyboardRow.length === 2) {
                  enginesKeyboard.push(keyboardRow)
                  keyboardRow = []
               }
            }
         }
         keyboardRow.length > 0 ? enginesKeyboard.push(keyboardRow) : ''
         enginesKeyboard.push([{
            text: '–õ—é–±–∞—è',
            callback_data: 'subscribe_all_engines',
         }])
      }
      return {
         keyboard: enginesKeyboard,
         enginesData: engineShortcuts,
         enginesList: engineShortcutsArr
      }
   }
   // –ö–û–ú–ü–õ–ï–ö–¢–ê–¶–ò–ò
   getEquipmentsKeyboard(engineShortcut, modelShortcut, userSubscribes) {
      const equipmentKeyboard = []
      const equipmentShortcutsArr = []
      let keyboardRow = []
      if(this.allCars) {
         for(let car of this.allCars) {
            if((car.model_name === modelShortcut) && (car.engine_type === engineShortcut)) {
               equipmentShortcutsArr.push(car.equipment_name)
            }
         }
         for(let foundedEquipment of equipmentShortcutsArr) {
            const equipment = this.equipmentNames.find((equipmentName) => {
               if(equipmentName.callback_action === foundedEquipment) {
                  return foundedEquipment
               }
            })
            if(equipment) {
               const buttonIcon = this.checkEquipmentSubscribe(
                  foundedEquipment, engineShortcut, modelShortcut, userSubscribes
               )
               keyboardRow.push({
                  text: `${buttonIcon} ${equipment.equipment_name}`,
                  callback_data: equipment.callback_action
               })
               if(keyboardRow.length === 2) {
                  equipmentKeyboard.push(keyboardRow)
                  keyboardRow = []
               }
            }
         }
         keyboardRow.length > 0 ? equipmentKeyboard.push(keyboardRow) : ''
         equipmentKeyboard.push([{
            text: '–õ—é–±–∞—è',
            callback_data: 'subscribe_all_equipment',
         }])
      }
      return {
         keyboard: equipmentKeyboard,
         equipmentList: equipmentShortcutsArr
      }
   }

   checkModelSubscribe(callback_action, userSubscribes) {
      let buttonIcon = '‚úÖ'
      for(let subscribe of userSubscribes) {
         if(subscribe.model === callback_action) buttonIcon = '‚ùé'
      }
      return buttonIcon
   }
   checkEngineSubscribe(callback_action, userSubscribes) {
      let buttonIcon = '‚úÖ'
      if(!userSubscribes) return
      for(let subscribe of userSubscribes) {
         if(subscribe.engine === callback_action) buttonIcon = '‚ùé'
      }
      return buttonIcon
   }
   checkEquipmentSubscribe(equipment, engine, model, userSubscribes) {
      let buttonIcon = '‚úÖ'
      for(let sub of userSubscribes) {
         if((sub.model === model) && (sub.engine === engine) && (sub.equipment === equipment)) {
            buttonIcon = '‚ùé'
         }
      }
      return buttonIcon
   }

   existPhones(users) {
      const phonesKeyboard = []
      for(let user of users) {
         if(user.role_id === 2) {
            phonesKeyboard.push([{
               text: `${user.phone_num} ‚ùå`,
               callback_data: user.phone_num,
            }])
         }
      }
      return phonesKeyboard
   }

   subscribeSuccess() {
      return [[{
         text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë –Ω–∞ –æ–¥–Ω—É',
         callback_data: 'reload_menu',
      }]]
   }
   unSubscribeSuccess() {
      return [[{
         text: '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.',
         callback_data: 'reload_menu',
      }]]
   }
   confirmLoginInit() {
      return [[{
         text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
         callback_data: 'send_auth_code_init',
      }]]
   }
   confirmAuth() {
      return [[{
         text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥',
         callback_data: 'send_auth_code',
      }]]
   }
   settings() {
      return [
         [
            {
               text: '–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
               callback_data: 'settings:change_city',
            },
            {
               text: '–î–∏–ª–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
               callback_data: 'settings:change_diler',
            }
         ],
         [{
            text: '–ö–Ω–æ–ø–∫–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã',
            callback_data: 'settings:change_payment_method',
         }]
         // [{
         //    text: 'üîî - –£–≤–µ–¥–æ–º–ª–∏—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ - üîî',
         //    callback_data: 'send_request_all',
         // }]
      ]
   }

   get cars() {
      return {
         models: this.modelNames,
         engines: this.engineTypes
      }
   }
}

export { InlineKeyboard }