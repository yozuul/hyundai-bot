import { UserController, SettingsController } from '../controllers'
import { InlineKeyboard, ReplyKeyboard } from './keyboards'

export class MainMenu {
   constructor(bot) {
      this.bot = bot
      this.user = {}
   }
   async init(users) {
      for(let user of users) {
         const chat_id = user.tg_id
         this.user[chat_id] = {
            chat_id: chat_id,
            role_id: user.role_id,
            phone_num: user.phone_num,
            curentSelected: {},
         }
      }
      this.inlineKeyboard = new InlineKeyboard()
      const { allCars, modelNames, engineTypes, equipmentNames } = await this.inlineKeyboard.init()
      this.allCars = allCars
      this.modelNames = modelNames
      this.engineTypes = engineTypes
      this.equipmentNames = equipmentNames
   }

   // –ú–ï–ù–Æ –ê–î–ú–ò–ù–ê
   async botSettings(chat_id) {
      if(this.user[chat_id].role_id === 1) {
         const title = 'üõ† –ù–ê–°–¢–†–û–ô–ö–ò'
         const menu = await this.bot.sendMessage(chat_id, title, {
            reply_markup: JSON.stringify({
               inline_keyboard: await this.inlineKeyboard.settings()
            })
         })
         this.user[chat_id].settings_menu_id = menu.message_id
         this.user[chat_id].currentMenu = 'settings'
         this.user[chat_id].menuPath = '/settings'
      }
   }
   // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   async changeSettings(chat_id) {
      const { data: settings } = await SettingsController.getBotSettings()
      const message = async (text) => this.bot.sendMessage(chat_id, text)
      await this.bot.deleteMessage(chat_id, this.user[chat_id].settings_menu_id)
      return {
         city: () => {
            const title = `–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: \n${settings.default_city}\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç`
            message(title)
            this.user[chat_id].currentMenu = 'changeCity'
         },
         diler: () => {
            const title = `–¢–µ–∫—É—â–∏–π –¥–∏–ª–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: \n${settings.default_diler} (${settings.default_city})\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–ª–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç`
            message(title)
            this.user[chat_id].currentMenu = 'changeDiler'
         },
         payment: () => {
            const title = `–¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: \n${settings.default_payment}\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–≤–∑–∞–Ω–∏–µ –≤ —á–∞—Ç`
            message(title)
            this.user[chat_id].currentMenu = 'changePayment'
         },
      }
   }

   async checkSettings(chat_id, text) {
      if((this.user[chat_id].role_id !== 1) || (this.user[chat_id].menuPath !== '/settings')) return
      if(this.user[chat_id].currentMenu === 'changeCity') {
         const title = `–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}.\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞`
         SettingsController.setDefaultCity(text)
         await this.bot.sendMessage(chat_id, title)
         await this.botSettings(chat_id)
      }
      if(this.user[chat_id].currentMenu === 'changeDiler') {
         const title = `–î–∏–ª–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}.\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞`
         SettingsController.setDefaultDiler(text)
         await this.bot.sendMessage(chat_id, title)
         await this.botSettings(chat_id)
      }
      if(this.user[chat_id].currentMenu === 'changePayment') {
         const title = `–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}.\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞`
         SettingsController.setDefaultPayment(text)
         await this.botSettings(chat_id)
      }
   }

   async addNewPhone(chat_id) {
      if(this.user[chat_id].role_id === 1) {
         if(!this.user[chat_id].menu_id) { await this.started(chat_id) }
         const title = '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å –µ–≥–æ –Ω–æ–º–µ—Ä–æ–º.\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n+7xxxxxxxxxx'
         const users = await UserController.getAll()
         await this.bot.editMessageText(title, {
            chat_id: chat_id,
            message_id: this.user[chat_id].menu_id,
            reply_markup: JSON.stringify({
               inline_keyboard: this.inlineKeyboard.existPhones(users.data)
            })
         })
      }
      this.user[chat_id].currentMenu = 'addNewPhone'
      this.user[chat_id].menuPath = '/addNewPhone'
   }

   async deletePhone(chat_id, phone_num) {
      if(this.user[chat_id].currentMenu = 'addNewPhone') {
         await UserController.deletePhone([chat_id, phone_num])
         await this.bot.deleteMessage(chat_id, this.user[chat_id].menu_id)
      }
   }

   async saveNewPhone(chat_id, phoneNumber) {
      const checkCorrectPhone = parseInt(phoneNumber)
      if(this.user[chat_id].currentMenu = 'addNewPhone') {
         if(checkCorrectPhone.toString().length === 11) {
            const user = await UserController.saveNewPhone([phoneNumber])
            await this.bot.sendMessage(chat_id, user.data.text)
            this.started(chat_id)
         } else {
            await this.bot.sendMessage(chat_id, '–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ')
            return
         }
      }
   }

   async started(chat_id) {
      const userSubscribe = await UserController.getSubscribes([chat_id])
      if(!this.user[chat_id]) return
      if(this.user) {
         this.user[chat_id].userSubscribe = userSubscribe.data
         if (this.user[chat_id].role_id === 1) {
            await this.bot.sendMessage(chat_id, '–í–´ –í–û–®–õ–ò –ö–ê–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†', {
               reply_markup: {
                  keyboard: ReplyKeyboard.startedAdmin,
                  resize_keyboard: true
               }
            })
         }
         if (this.user[chat_id].role_id === 2) {
            await this.bot.sendMessage(chat_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', {
               reply_markup: {
                  keyboard: ReplyKeyboard.startedUser,
                  resize_keyboard: true
               }
            })
         }
         const startedMenu = await this.bot.sendMessage(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ–¥–±–æ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è', {
            reply_markup: JSON.stringify({
               inline_keyboard: await this.inlineKeyboard.getModelsKeyboard(this.user[chat_id].userSubscribe)
            })
         })
         this.user[chat_id].menu_id = startedMenu.message_id
         this.user[chat_id].currentMenu = 'started'
         this.user[chat_id].menuPath = 'models'
      }
      return
   }

   async sendNotify({text, users}) {
      for(let chat_id of users) {
         await this.bot.sendMessage(chat_id, text)
      }
   }

   async getEnginesMenu(chat_id, modelShortcut) {
      if(!this.user[chat_id]) return
      console.log(this.user)
      const menuTitle = '–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª—é–±–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ –∂–µ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?'
      this.enginesMenuData = this.inlineKeyboard?.getEnginesKeyboard(
         modelShortcut, this.user[chat_id].userSubscribe
      )
      if(this.enginesMenuData) {
         this.bot.editMessageText(menuTitle, {
            chat_id: chat_id,
            message_id: this.user[chat_id].menu_id,
            reply_markup: JSON.stringify({
               inline_keyboard: this.enginesMenuData.keyboard
            })
         })
      }
      this.user[chat_id].currentMenu = 'engines'
      this.user[chat_id].menuPath += '/engines'
      this.user[chat_id].curentSelected.model = modelShortcut
   }

   async getEquipmentsMenu(chat_id, engineShortcut) {
      if(!this.user[chat_id]) return
      const title = '–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª—é–±–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏–ª–∏ –∂–µ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?'
      this.equipmentsMenuData = this.inlineKeyboard?.getEquipmentsKeyboard(
         engineShortcut, this.user[chat_id].curentSelected.model, this.user[chat_id].userSubscribe
      )
      if (this.equipmentsMenuData) {
         this.bot.editMessageText(title, {
            chat_id: chat_id,
            message_id: this.user[chat_id].menu_id,
            reply_markup: JSON.stringify({
               inline_keyboard: this.equipmentsMenuData.keyboard
            })
         })
      }
      this.user[chat_id].currentMenu = 'equipments'
      this.user[chat_id].menuPath += '/equipments'
      this.user[chat_id].curentSelected.engine = engineShortcut
   }
   // –ü–û–î–ü–ò–°–ö–ê
   async subscribeAllModels(chat_id) {
      if(!this.user[chat_id]) return
      await UserController.subscribeAllModels({
         tg_id: chat_id,
         allCars: this.allCars
      })
      await this.subscribeSuccess(chat_id)
   }

   async subscribeAllEngines(chat_id) {
      if(!this.user[chat_id]) return
      await UserController.subscribeAllEngines({
         tg_id: chat_id,
         model: this.user[chat_id].curentSelected.model,
         modelName: this.user[chat_id].curentSelected.model,
         allCars: this.allCars
      })
      await this.subscribeSuccess(chat_id)
   }

   async subscribeAllEquipments(chat_id) {
      if(!this.user[chat_id]) return
      const curentSelected = this.user[chat_id].curentSelected
      await UserController.subscribeAllEquipments({
         tg_id: chat_id,
         model: curentSelected.model,
         engine: curentSelected.engine,
         allCars: this.allCars
      })
      this.subscribeSuccess(chat_id)
   }
   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
   async checkEquipmentSubscribe(chat_id, equipmentshortcuts) {
      if(!this.user[chat_id]) return
      const user = this.user[chat_id]
      user.curentSelected.equipment = equipmentshortcuts
      const { model, engine, equipment } = user.curentSelected
      const founded = await UserController.checkEquipmentSubscribe({
         tg_id: user.chat_id,
         model: model,
         engine: engine,
         equipment: equipment
      })
      if(founded.data.result === 'unsubscribe') {
         this.unsubscribeEquipment(chat_id)
      } else {
         this.subscribeSuccess(chat_id)
      }
   }
   // –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é
   async unsubscribeEquipment(chat_id) {
      if(!this.user[chat_id]) return
      await this.bot.editMessageText('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.', {
         chat_id: chat_id,
         message_id: this.user[chat_id].menu_id,
         reply_markup: JSON.stringify({
            inline_keyboard: this.inlineKeyboard.subscribeSuccess()
         })
      })
   }
   // –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
   async subscribeSuccess(chat_id) {
      await this.bot.editMessageText('–°–ø–∞—Å–∏–±–æ, –º—ã —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –≤–∞—Å.', {
         chat_id: chat_id,
         message_id: this.user[chat_id].menu_id,
         reply_markup: JSON.stringify({
            inline_keyboard: this.inlineKeyboard.subscribeSuccess()
         })
      })
   }
   // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ–≥–æ
   async unsubscribeAll(chat_id) {
      if(!this.user[chat_id]) return
      await UserController.unsubscribeAll([chat_id])
      await this.bot.sendMessage(chat_id, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫.')
      await this.started(chat_id)
      return
   }
   async userNotExist(chat_id) {
      await this.bot.sendMessage(chat_id, '–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É', {
         reply_markup: {
            keyboard: ReplyKeyboard.startedUnauthorize
         }
      })
   }
   checkUser(chat_id) {
      if(this.user) {
         return this.user[chat_id]
      } else {
         return false
      }
   }
   async reopenMenu(chat_id, menu_id) {
      if (chat_id && this.menu_id) {
         await this.bot.editMessageText('[–ú–µ–Ω—é –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ —ç—Ç–æ –º–µ–Ω—é –Ω–∏–∂–µ]', {
            chat_id: chat_id,
            message_id: this.menu_id
         })
      } if(!this.menu_id) {
         this.menu_id = menu_id
      }
   }
   foundModelName(chat_id) {
      const user = this.user[chat_id]
      let modelName = false
      for(let model of this.modelNames) {
         if(model.callback_action === user.curentSelected.model) {
            modelName = model.model_name
         }
      }
      return modelName
   }
   foundEngineType(chat_id) {
      const user = this.user[chat_id]
      let engineType = false
      for(let engine of this.engineTypes) {
         if(engine.callback_action === user.curentSelected.engine) {
            engineType = engine.engine_type
         }
      }
      return engineType
   }
   foundEquipmentName(chat_id) {
      const user = this.user[chat_id]
      let equipmentName = false
      for(let equipment of this.equipmentNames) {
         if(equipment.callback_action === user.curentSelected.equipment) {
            equipmentName = equipment.equipment_name
         }
      }
      return equipmentName
   }
}